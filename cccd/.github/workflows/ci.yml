name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        # Create production build
        npm run build || echo "No build script defined"

    - name: Test API server startup
      run: |
        timeout 10s npm start api &
        sleep 5
        curl -f http://localhost:3000/health || exit 1
        pkill -f "npm start api" || true

    - name: Test CLI commands
      run: |
        node src/main.js cli config
        node src/main.js cli generate -q 1
        node src/main.js cli analyze 001010101678

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create deployment package
      run: |
        mkdir -p dist
        cp -r src dist/
        cp package*.json dist/
        cp README.md dist/
        cp jest.config.js dist/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cccd-system-dist
        path: dist/

    - name: Deploy to staging (if configured)
      if: false # Disabled by default
      run: |
        echo "Deploy to staging environment"
        # Add your deployment commands here

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All CI/CD checks passed successfully!"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ CI/CD checks failed. Please review the logs."
        exit 1