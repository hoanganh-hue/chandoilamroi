/**
 * CLI Commands - Updated
 * Command line interface cho h·ªá th·ªëng CCCD
 */

const { Command } = require('commander');
const CCCDGeneratorService = require('../services/cccd_generator_service');
const CCCDAnalyzerService = require('../services/cccd_analyzer_service');
const CCCDConfig = require('../config/cccd_config');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');
const { formatOutput, saveToFile } = require('./cli_helpers');

const program = new Command('cli');

// Initialize services
const generatorService = new CCCDGeneratorService();
const analyzerService = new CCCDAnalyzerService();

// Generate command
program
    .command('generate')
    .description('T·∫°o danh s√°ch CCCD')
    .option('-p, --provinces <codes>', 'M√£ t·ªânh (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)', '001')
    .option('-g, --gender <gender>', 'Gi·ªõi t√≠nh (Nam/N·ªØ)')
    .option('-y, --year-range <range>', 'Kho·∫£ng nƒÉm sinh (v√≠ d·ª•: 1990-2000)')
    .option('-q, --quantity <number>', 'S·ªë l∆∞·ª£ng CCCD c·∫ßn t·∫°o', '10')
    .option('-o, --output <file>', 'L∆∞u k·∫øt qu·∫£ v√†o file')
    .option('-f, --format <format>', 'ƒê·ªãnh d·∫°ng output (json/table)', 'json')
    .action(async(options) => {
        try {
            logger.info('CLI Generate command started', options);

            // Parse provinces
            const provinceCodes = options.provinces.split(',').map(code => code.trim());

            // Parse year range
            let birthYearRange = null;
            if (options.yearRange) {
                const [start, end] = options.yearRange.split('-').map(y => parseInt(y.trim(), 10));
                if (start && end) {
                    birthYearRange = [start, end];
                }
            }

            const quantity = parseInt(options.quantity, 10);

            logger.logCCCDOperation('CLI Generation', {
                provinceCodes,
                gender: options.gender,
                birthYearRange,
                quantity
            });

            const results = generatorService.generateCccdList(
                provinceCodes,
                options.gender,
                birthYearRange,
                null,
                quantity
            );

            if (results.error) {
                console.error('‚ùå L·ªói:', results.error);
                logger.error('CLI Generation failed', { error: results.error });
                process.exit(1);
            }

            console.log('‚úÖ T·∫°o CCCD th√†nh c√¥ng!');
            console.log(`üìä S·ªë l∆∞·ª£ng: ${results.length}`);

            if (results[0]?._metadata) {
                console.log('üìã Metadata:', results[0]._metadata);
            }

            const formattedOutput = formatOutput(results, options.format);
            console.log('\nüìÑ K·∫øt qu·∫£:');
            console.log(formattedOutput);

            if (options.output) {
                const filepath = saveToFile(results, options.output);
                console.log(`üíæ ƒê√£ l∆∞u v√†o: ${filepath}`);
            }

            logger.logCCCDOperation('CLI Generation Success', {
                generatedCount: results.length,
                savedToFile: !!options.output
            });

        } catch (error) {
            console.error('‚ùå L·ªói h·ªá th·ªëng:', error.message);
            logger.logError(error, { command: 'generate' });
            process.exit(1);
        }
    });

// Analyze command
program
    .command('analyze <cccd>')
    .description('Ph√¢n t√≠ch m·ªôt CCCD')
    .option('-d, --detailed', 'Ph√¢n t√≠ch chi ti·∫øt', true)
    .option('-l, --location', 'Hi·ªÉn th·ªã th√¥ng tin ƒë·ªãa l√Ω', true)
    .option('-o, --output <file>', 'L∆∞u k·∫øt qu·∫£ v√†o file')
    .option('-f, --format <format>', 'ƒê·ªãnh d·∫°ng output (json/table)', 'json')
    .action(async(cccd, options) => {
        try {
            logger.info('CLI Analyze command started', { cccd, options });

            logger.logCCCDOperation('CLI Analysis', { cccd });

            const analysis = analyzerService.analyzeCccdStructure(
                cccd,
                options.detailed,
                options.location
            );

            if (!analysis.valid) {
                console.error('‚ùå CCCD kh√¥ng h·ª£p l·ªá:', analysis.error);
                logger.warn('CLI Analysis failed', { cccd, error: analysis.error });
                process.exit(1);
            }

            console.log('‚úÖ Ph√¢n t√≠ch CCCD th√†nh c√¥ng!');
            console.log(`üÜî CCCD: ${analysis.cccd}`);
            console.log(`üìç T·ªânh: ${analysis.summary.provinceName}`);
            console.log(`üë§ Gi·ªõi t√≠nh: ${analysis.summary.gender}`);
            console.log(`üìÖ Ng√†y sinh: ${analysis.summary.birthDate}`);
            console.log(`üéÇ Tu·ªïi hi·ªán t·∫°i: ${analysis.summary.currentAge}`);

            if (analysis.locationInfo) {
                console.log(`üó∫Ô∏è  V√πng: ${analysis.locationInfo.region}`);
            }

            const formattedOutput = formatOutput(analysis, options.format);
            console.log('\nüìÑ K·∫øt qu·∫£ chi ti·∫øt:');
            console.log(formattedOutput);

            if (options.output) {
                const filepath = saveToFile(analysis, options.output);
                console.log(`üíæ ƒê√£ l∆∞u v√†o: ${filepath}`);
            }

            logger.logCCCDOperation('CLI Analysis Success', {
                cccd,
                valid: analysis.valid,
                province: analysis.summary.provinceName
            });

        } catch (error) {
            console.error('‚ùå L·ªói h·ªá th·ªëng:', error.message);
            logger.logError(error, { command: 'analyze', cccd });
            process.exit(1);
        }
    });

// Batch analyze command
program
    .command('batch-analyze <file>')
    .description('Ph√¢n t√≠ch h√†ng lo·∫°t CCCD t·ª´ file')
    .option('-o, --output <file>', 'L∆∞u k·∫øt qu·∫£ v√†o file')
    .option('-f, --format <format>', 'ƒê·ªãnh d·∫°ng output (json/table)', 'json')
    .action(async(file, options) => {
        try {
            logger.info('CLI Batch Analyze command started', { file, options });

            if (!fs.existsSync(file)) {
                console.error('‚ùå File kh√¥ng t·ªìn t·∫°i:', file);
                process.exit(1);
            }

            const fileContent = fs.readFileSync(file, 'utf8');
            let cccdList;

            try {
                cccdList = JSON.parse(fileContent);
            } catch (e) {
                // Try to parse as line-separated text
                cccdList = fileContent.split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length === 12 && /^\d+$/.test(line));
            }

            if (!Array.isArray(cccdList) || cccdList.length === 0) {
                console.error('‚ùå File kh√¥ng ch·ª©a danh s√°ch CCCD h·ª£p l·ªá');
                process.exit(1);
            }

            logger.logCCCDOperation('CLI Batch Analysis', {
                cccdCount: cccdList.length,
                sourceFile: file
            });

            const results = analyzerService.batchAnalyze(cccdList);

            if (results.error) {
                console.error('‚ùå L·ªói:', results.error);
                logger.error('CLI Batch Analysis failed', { error: results.error });
                process.exit(1);
            }

            console.log('‚úÖ Ph√¢n t√≠ch h√†ng lo·∫°t th√†nh c√¥ng!');
            console.log(`üìä T·ªïng s·ªë: ${results.totalAnalyzed}`);
            console.log(`‚úÖ H·ª£p l·ªá: ${results.validCount}`);
            console.log(`‚ùå Kh√¥ng h·ª£p l·ªá: ${results.invalidCount}`);
            console.log(`üìà T·ª∑ l·ªá h·ª£p l·ªá: ${results.validityRate.toFixed(2)}%`);

            if (results.summary) {
                console.log('\nüìã Th·ªëng k√™:');
                console.log(`üìç T·ªânh ph·ªï bi·∫øn: ${results.summary.mostCommonProvince.name} (${results.summary.mostCommonProvince.count})`);
                console.log('üë• Ph√¢n b·ªë gi·ªõi t√≠nh:', results.summary.genderDistribution);
                console.log('üéÇ Ph√¢n b·ªë tu·ªïi:', results.summary.ageDistribution);
            }

            const formattedOutput = formatOutput(results, options.format);
            console.log('\nüìÑ K·∫øt qu·∫£ chi ti·∫øt:');
            console.log(formattedOutput);

            if (options.output) {
                const filepath = saveToFile(results, options.output);
                console.log(`üíæ ƒê√£ l∆∞u v√†o: ${filepath}`);
            }

            logger.logCCCDOperation('CLI Batch Analysis Success', {
                totalAnalyzed: results.totalAnalyzed,
                validityRate: results.validityRate
            });

        } catch (error) {
            console.error('‚ùå L·ªói h·ªá th·ªëng:', error.message);
            logger.logError(error, { command: 'batch-analyze', file });
            process.exit(1);
        }
    });

// Config command
program
    .command('config')
    .description('Hi·ªÉn th·ªã c·∫•u h√¨nh h·ªá th·ªëng')
    .option('-f, --format <format>', 'ƒê·ªãnh d·∫°ng output (json/table)', 'json')
    .action(async(options) => {
        try {
            logger.info('CLI Config command started');

            const config = CCCDConfig.getConfigSummary();
            const validation = CCCDConfig.validateConfig();

            console.log('‚öôÔ∏è  C·∫•u h√¨nh h·ªá th·ªëng CCCD:');
            console.log(`üì¶ Module: ${config.module}`);
            console.log(`üî¢ Version: ${config.version}`);
            console.log(`üèõÔ∏è  T·ªïng s·ªë t·ªânh: ${config.totalProvinces}`);
            console.log(`üìä Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng: ${config.quantityLimits.default} - ${config.quantityLimits.max}`);
            console.log(`üìÖ Kho·∫£ng nƒÉm sinh: ${config.birthYearRange.min} - ${config.birthYearRange.max}`);

            console.log('\nüîß T√≠nh nƒÉng:');
            Object.entries(config.features).forEach(([key, value]) => {
                console.log(`  ${value ? '‚úÖ' : '‚ùå'} ${key}: ${value}`);
            });

            console.log('\nüìã Validation:');
            console.log(`  ${validation.valid ? '‚úÖ' : '‚ùå'} C·∫•u h√¨nh: ${validation.valid ? 'H·ª£p l·ªá' : 'C√≥ l·ªói'}`);
            if (validation.errors.length > 0) {
                console.log('  ‚ùå L·ªói:', validation.errors);
            }
            if (validation.warnings.length > 0) {
                console.log('  ‚ö†Ô∏è  C·∫£nh b√°o:', validation.warnings);
            }

            const formattedOutput = formatOutput({ config, validation }, options.format);
            console.log('\nüìÑ Chi ti·∫øt:');
            console.log(formattedOutput);

            logger.info('CLI Config command completed');

        } catch (error) {
            console.error('‚ùå L·ªói h·ªá th·ªëng:', error.message);
            logger.logError(error, { command: 'config' });
            process.exit(1);
        }
    });

// Help command
program
    .command('help')
    .description('Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng')
    .action(() => {
        console.log(`
üÜî H·ªá th·ªëng CCCD Analysis & Generation
====================================

üìã C√°c l·ªánh c√≥ s·∫µn:

üîß generate          T·∫°o danh s√°ch CCCD
   -p, --provinces    M√£ t·ªânh (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)
   -g, --gender       Gi·ªõi t√≠nh (Nam/N·ªØ)
   -y, --year-range   Kho·∫£ng nƒÉm sinh (v√≠ d·ª•: 1990-2000)
   -q, --quantity     S·ªë l∆∞·ª£ng CCCD c·∫ßn t·∫°o
   -o, --output       L∆∞u k·∫øt qu·∫£ v√†o file
   -f, --format       ƒê·ªãnh d·∫°ng output (json/table)

üîç analyze <cccd>     Ph√¢n t√≠ch m·ªôt CCCD
   -d, --detailed     Ph√¢n t√≠ch chi ti·∫øt
   -l, --location     Hi·ªÉn th·ªã th√¥ng tin ƒë·ªãa l√Ω
   -o, --output       L∆∞u k·∫øt qu·∫£ v√†o file
   -f, --format       ƒê·ªãnh d·∫°ng output (json/table)

üìä batch-analyze <file>  Ph√¢n t√≠ch h√†ng lo·∫°t CCCD t·ª´ file
   -o, --output       L∆∞u k·∫øt qu·∫£ v√†o file
   -f, --format       ƒê·ªãnh d·∫°ng output (json/table)

‚öôÔ∏è  config            Hi·ªÉn th·ªã c·∫•u h√¨nh h·ªá th·ªëng
   -f, --format       ƒê·ªãnh d·∫°ng output (json/table)

üìñ help              Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y

üìù V√≠ d·ª• s·ª≠ d·ª•ng:
   node src/main.js cli generate -p "001,079" -g "Nam" -q 5
   node src/main.js cli analyze 001012345678
   node src/main.js cli batch-analyze cccd_list.txt
   node src/main.js cli config

üìö T√†i li·ªáu: https://github.com/your-org/cccd-analysis-system
        `);
    });

module.exports = program;